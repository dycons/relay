{
	"info": {
		"_postman_id": "e7e0f19f-0c4e-417d-82ac-ca5b5554faf1",
		"name": "key-relay-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /consents",
			"item": [
				{
					"name": "success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responseData = pm.response.json();",
									"pm.test(\"Has default consents \", function () {",
									"    pm.expect(responseData.default_consent).to.be.a(\"object\");",
									"});",
									"pm.test(\"Has project consents \", function () {",
									"    pm.expect(responseData.project_consents).to.be.a(\"array\");",
									"});",
									"",
									"// WIP: Test that response schema is valid",
									"// This test seems to pass no matter how I change the schema...?",
									"const schema = {",
									"    \"default_consent\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"genetic_consent_style\": {\"type\": \"string\"},",
									"            \"clinical_consent_style\": {\"type\": \"string\"}",
									"        }",
									"    },",
									"    \"project_consents\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"project_application_id\": {\"type\": \"int32\"},",
									"                \"genetic_consent\": {\"type\": \"boolean\"},",
									"                \"clinical_consent\": {\"type\": \"boolean\"}",
									"            }",
									"        }",
									"    }",
									"};",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}{{host}}/consents",
							"host": [
								"{{scheme}}{{host}}"
							],
							"path": [
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "forbidden (no token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}{{host}}/consents",
							"host": [
								"{{scheme}}{{host}}"
							],
							"path": [
								"consents"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ping (no token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that request succeeded",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"// Test that response schema is valid ",
							"const schema = {",
							"    \"message:\": {\"type\": \"string\"},",
							"};",
							"pm.test('Response schema is valid', function() {",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;",
							"});",
							"",
							"// Test that response values equal the expected values",
							"pm.test(\"Response values satisfy expectations\", () => {",
							"    pm.expect(responseData.message).to.eql(\"pong\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}{{host}}/ping",
					"host": [
						"{{scheme}}{{host}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "scheme",
			"value": "http://"
		},
		{
			"key": "host",
			"value": "0.0.0.0:3006"
		},
		{
			"key": "jwt",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ik1pYyBGb2siLCJyb2xlIjoicmVzZWFyY2gtcGFydGljaXBhbnQiLCJhZG1pbl9pZCI6IjEiLCJpYXQiOjE1MTYyMzkwMjIsImp0aSI6IjNkMzUwZjU5LTliYTUtNDU4OS1hNTgxLTg5NjI5YWQ2NmU1NyIsImV4cCI6MTYxMzA5NDkxNX0.5iT-x_PLbHgYg7pA4HhBNtiEE41_4teOYY3NwnRCsAw"
		}
	]
}